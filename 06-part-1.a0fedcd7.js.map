{"version":3,"sources":["node_modules/camelcase/index.js","06-part-1.js"],"names":["preserveCamelCase","string","isLastCharLower","isLastCharUpper","isLastLastCharUpper","i","length","character","test","toUpperCase","slice","toLowerCase","camelCase","input","options","Array","isArray","TypeError","Object","assign","pascalCase","postProcess","x","map","trim","filter","join","replace","_","p1","m","charAt","module","exports","default","result","document","querySelector","onChange","event","inputValue","value","newText","innerHTML","addEventListener"],"mappings":";AAAA,aAEA,IAAMA,EAAoB,SAAAC,GAKpB,IAJDC,IAAAA,GAAkB,EAClBC,GAAkB,EAClBC,GAAsB,EAEjBC,EAAI,EAAGA,EAAIJ,EAAOK,OAAQD,IAAK,CACjCE,IAAAA,EAAYN,EAAOI,GAErBH,GAAmB,WAAWM,KAAKD,IAAcA,EAAUE,gBAAkBF,GAChFN,EAASA,EAAOS,MAAM,EAAGL,GAAK,IAAMJ,EAAOS,MAAML,GACjDH,GAAkB,EAClBE,EAAsBD,EACtBA,GAAkB,EAClBE,KACUF,GAAmBC,GAAuB,WAAWI,KAAKD,IAAcA,EAAUI,gBAAkBJ,GAC9GN,EAASA,EAAOS,MAAM,EAAGL,EAAI,GAAK,IAAMJ,EAAOS,MAAML,EAAI,GACzDD,EAAsBD,EACtBA,GAAkB,EAClBD,GAAkB,IAElBA,EAAkBK,EAAUI,gBAAkBJ,GAAaA,EAAUE,gBAAkBF,EACvFH,EAAsBD,EACtBA,EAAkBI,EAAUE,gBAAkBF,GAAaA,EAAUI,gBAAkBJ,GAIlFN,OAAAA,GAGFW,EAAY,SAACC,EAAOC,GACrB,GAAmB,iBAAVD,IAAsBE,MAAMC,QAAQH,GAC1C,MAAA,IAAII,UAAU,gDAGrBH,EAAUI,OAAOC,OAAO,CACvBC,YAAY,GACVN,GAEGO,IAAcC,EAUhBT,OAAiB,KAPpBA,EADGE,MAAMC,QAAQH,GACTA,EAAMU,IAAI,SAAAD,GAAKA,OAAAA,EAAEE,SACvBC,OAAO,SAAAH,GAAKA,OAAAA,EAAEhB,SACdoB,KAAK,KAECb,EAAMW,QAGLlB,OACF,GAGa,IAAjBO,EAAMP,OACFQ,EAAQM,WAAaP,EAAMJ,cAAgBI,EAAMF,eAGpCE,IAAUA,EAAMF,gBAGpCE,EAAQb,EAAkBa,IAG3BA,EAAQA,EACNc,QAAQ,YAAa,IACrBhB,cACAgB,QAAQ,kBAAmB,SAACC,EAAGC,GAAOA,OAAAA,EAAGpB,gBACzCkB,QAAQ,aAAc,SAAAG,GAAKA,OAAAA,EAAErB,gBA5BXa,EA8BDT,EA9BMC,EAAQM,WAAaE,EAAES,OAAO,GAAGtB,cAAgBa,EAAEZ,MAAM,GAAKY,IAiCxFU,OAAOC,QAAUrB,EAEjBoB,OAAOC,QAAQC,QAAUtB;;ACnDzB,aAdA,IAAA,EAAA,EAAA,QAAA,cAcA,SAAA,EAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,GAVA,IAAMuB,EAASC,SAASC,cAAc,WAChCxB,EAAQuB,SAASC,cAAc,UAE/BC,EAAW,SAACC,GACbC,IAAAA,EAAa3B,EAAM4B,MACjBC,GAAU,EAAUF,EAAAA,SAAAA,GAEnBL,OAAAA,EAAOQ,UAAYD,GAG3B7B,EAAM+B,iBAAiB,OAAQN","file":"06-part-1.a0fedcd7.js","sourceRoot":"..","sourcesContent":["'use strict';\n\nconst preserveCamelCase = string => {\n\tlet isLastCharLower = false;\n\tlet isLastCharUpper = false;\n\tlet isLastLastCharUpper = false;\n\n\tfor (let i = 0; i < string.length; i++) {\n\t\tconst character = string[i];\n\n\t\tif (isLastCharLower && /[a-zA-Z]/.test(character) && character.toUpperCase() === character) {\n\t\t\tstring = string.slice(0, i) + '-' + string.slice(i);\n\t\t\tisLastCharLower = false;\n\t\t\tisLastLastCharUpper = isLastCharUpper;\n\t\t\tisLastCharUpper = true;\n\t\t\ti++;\n\t\t} else if (isLastCharUpper && isLastLastCharUpper && /[a-zA-Z]/.test(character) && character.toLowerCase() === character) {\n\t\t\tstring = string.slice(0, i - 1) + '-' + string.slice(i - 1);\n\t\t\tisLastLastCharUpper = isLastCharUpper;\n\t\t\tisLastCharUpper = false;\n\t\t\tisLastCharLower = true;\n\t\t} else {\n\t\t\tisLastCharLower = character.toLowerCase() === character && character.toUpperCase() !== character;\n\t\t\tisLastLastCharUpper = isLastCharUpper;\n\t\t\tisLastCharUpper = character.toUpperCase() === character && character.toLowerCase() !== character;\n\t\t}\n\t}\n\n\treturn string;\n};\n\nconst camelCase = (input, options) => {\n\tif (!(typeof input === 'string' || Array.isArray(input))) {\n\t\tthrow new TypeError('Expected the input to be `string | string[]`');\n\t}\n\n\toptions = Object.assign({\n\t\tpascalCase: false\n\t}, options);\n\n\tconst postProcess = x => options.pascalCase ? x.charAt(0).toUpperCase() + x.slice(1) : x;\n\n\tif (Array.isArray(input)) {\n\t\tinput = input.map(x => x.trim())\n\t\t\t.filter(x => x.length)\n\t\t\t.join('-');\n\t} else {\n\t\tinput = input.trim();\n\t}\n\n\tif (input.length === 0) {\n\t\treturn '';\n\t}\n\n\tif (input.length === 1) {\n\t\treturn options.pascalCase ? input.toUpperCase() : input.toLowerCase();\n\t}\n\n\tconst hasUpperCase = input !== input.toLowerCase();\n\n\tif (hasUpperCase) {\n\t\tinput = preserveCamelCase(input);\n\t}\n\n\tinput = input\n\t\t.replace(/^[_.\\- ]+/, '')\n\t\t.toLowerCase()\n\t\t.replace(/[_.\\- ]+(\\w|$)/g, (_, p1) => p1.toUpperCase())\n\t\t.replace(/\\d+(\\w|$)/g, m => m.toUpperCase());\n\n\treturn postProcess(input);\n};\n\nmodule.exports = camelCase;\n// TODO: Remove this for the next major release\nmodule.exports.default = camelCase;\n","// const a = {\r\n//  hello: \"world\",\r\n//  num: 3\r\n// }\r\n\r\n// let newA = JSON.stringify(a);\r\n// console.log(newA);\r\n// JSON.parse(json: string);\r\n// console.log(newA);\r\n\r\nimport camelCase from 'camelcase';\r\n// console.log(camelCase('foo-bar'));\r\n\r\n\r\nconst result = document.querySelector('#result');\r\nconst input = document.querySelector('#input');\r\n\r\nconst onChange = (event) => {\r\n\tlet inputValue = input.value;\r\n\tconst newText = camelCase(inputValue);\r\n\r\n\treturn result.innerHTML = newText;\r\n}\r\n\r\ninput.addEventListener('blur', onChange);\r\n"]}